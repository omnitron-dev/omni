name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint-and-format:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22.x

      - name: Enable Corepack
        run: corepack enable

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn config get cacheFolder)" >> $GITHUB_OUTPUT

      - name: Cache yarn dependencies
        uses: actions/cache@v4
        with:
          path: |
            ${{ steps.yarn-cache-dir-path.outputs.dir }}
            .yarn/cache
            .yarn/unplugged
            .yarn/install-state.gz
          key: ${{ runner.os }}-yarn-lint-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-lint-
            ${{ runner.os }}-yarn-

      - name: Install dependencies
        run: yarn install --immutable

      - name: Build packages
        run: yarn build

      - name: Check formatting
        run: yarn fm:check

      - name: Run linter
        run: yarn lint

  test-core-packages:
    name: Test Core Packages
    runs-on: ubuntu-latest
    needs: lint-and-format
    
    strategy:
      fail-fast: false
      matrix:
        node-version: [20.x, 22.x]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Enable Corepack
        run: corepack enable

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn config get cacheFolder)" >> $GITHUB_OUTPUT

      - name: Cache yarn dependencies
        uses: actions/cache@v4
        with:
          path: |
            ${{ steps.yarn-cache-dir-path.outputs.dir }}
            .yarn/cache
            .yarn/unplugged
            .yarn/install-state.gz
          key: ${{ runner.os }}-yarn-${{ matrix.node-version }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-${{ matrix.node-version }}-
            ${{ runner.os }}-yarn-

      - name: Cache turbo build
        uses: actions/cache@v4
        with:
          path: .turbo
          key: ${{ runner.os }}-turbo-ci-${{ matrix.node-version }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-ci-${{ matrix.node-version }}-
            ${{ runner.os }}-turbo-ci-

      - name: Install dependencies
        run: yarn install --immutable

      - name: Build packages
        run: yarn build

      - name: Run tests for core packages
        run: |
          yarn workspace @devgrid/common test
          yarn workspace @devgrid/eventemitter test
          yarn workspace @devgrid/smartbuffer test
          yarn workspace @devgrid/messagepack test
        env:
          NODE_OPTIONS: --max-old-space-size=4096

      - name: Generate test summary
        if: always()
        run: |
          echo "## Test Results (Node ${{ matrix.node-version }})" >> $GITHUB_STEP_SUMMARY
          echo "✅ Core packages tested: common, eventemitter, smartbuffer, messagepack" >> $GITHUB_STEP_SUMMARY

  build-check:
    name: Build Check
    runs-on: ubuntu-latest
    needs: lint-and-format
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22.x

      - name: Enable Corepack
        run: corepack enable

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn config get cacheFolder)" >> $GITHUB_OUTPUT

      - name: Cache yarn dependencies
        uses: actions/cache@v4
        with:
          path: |
            ${{ steps.yarn-cache-dir-path.outputs.dir }}
            .yarn/cache
            .yarn/unplugged
            .yarn/install-state.gz
          key: ${{ runner.os }}-yarn-build-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-build-
            ${{ runner.os }}-yarn-

      - name: Cache turbo build
        uses: actions/cache@v4
        with:
          path: .turbo
          key: ${{ runner.os }}-turbo-build-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-build-

      - name: Install dependencies
        run: yarn install --immutable

      - name: Build all packages
        run: yarn build

      - name: Check for build artifacts
        run: |
          echo "Checking build artifacts..."
          for package in common eventemitter smartbuffer messagepack; do
            if [ ! -d "packages/$package/dist" ]; then
              echo "❌ Missing dist directory for @devgrid/$package"
              exit 1
            fi
            echo "✅ @devgrid/$package built successfully"
          done

  ci-summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [lint-and-format, test-core-packages, build-check]
    if: always()
    
    steps:
      - name: Generate CI summary
        run: |
          echo "## CI Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.lint-and-format.result }}" == "success" ]; then
            echo "✅ **Lint and Format**: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Lint and Format**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.test-core-packages.result }}" == "success" ]; then
            echo "✅ **Core Package Tests**: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Core Package Tests**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.build-check.result }}" == "success" ]; then
            echo "✅ **Build Check**: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Build Check**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.lint-and-format.result }}" == "success" ] && \
             [ "${{ needs.test-core-packages.result }}" == "success" ] && \
             [ "${{ needs.build-check.result }}" == "success" ]; then
            echo "### ✅ All CI checks passed!" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ❌ Some CI checks failed. Please review the logs." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi