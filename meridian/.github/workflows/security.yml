name: Security

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security checks every day at 00:00 UTC
    - cron: '0 0 * * *'

env:
  CARGO_TERM_COLOR: always

jobs:
  audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo-audit
        uses: actions/cache@v4
        with:
          path: ~/.cargo/bin/cargo-audit
          key: ${{ runner.os }}-cargo-audit

      - name: Install cargo-audit
        run: cargo install cargo-audit --locked

      - name: Run cargo audit
        run: cargo audit --deny warnings

  rustsec:
    name: RustSec Advisories
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo-deny
        uses: actions/cache@v4
        with:
          path: ~/.cargo/bin/cargo-deny
          key: ${{ runner.os }}-cargo-deny

      - name: Install cargo-deny
        run: cargo install cargo-deny --locked

      - name: Create deny.toml if not exists
        run: |
          if [ ! -f deny.toml ]; then
            cat > deny.toml << 'EOF'
          [advisories]
          vulnerability = "deny"
          unmaintained = "warn"
          unsound = "warn"
          yanked = "warn"
          notice = "warn"
          ignore = []

          [licenses]
          unlicensed = "deny"
          allow = ["MIT", "Apache-2.0", "BSD-3-Clause", "ISC", "MPL-2.0"]
          deny = []
          copyleft = "warn"
          allow-osi-fsf-free = "both"
          default = "deny"
          confidence-threshold = 0.8

          [bans]
          multiple-versions = "warn"
          wildcards = "warn"
          highlight = "all"
          workspace-default-features = "allow"
          external-default-features = "allow"

          [sources]
          unknown-registry = "warn"
          unknown-git = "warn"
          allow-registry = ["https://github.com/rust-lang/crates.io-index"]
          EOF
          fi

      - name: Check advisories
        run: cargo deny check advisories

      - name: Check licenses
        run: cargo deny check licenses

      - name: Check bans
        run: cargo deny check bans

      - name: Check sources
        run: cargo deny check sources

  supply-chain:
    name: Supply Chain Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo-vet
        uses: actions/cache@v4
        with:
          path: ~/.cargo/bin/cargo-vet
          key: ${{ runner.os }}-cargo-vet

      - name: Install cargo-vet
        run: cargo install cargo-vet --locked

      - name: Initialize cargo-vet if needed
        run: cargo vet init || true

      - name: Run cargo-vet
        run: cargo vet --locked || echo "cargo-vet found issues - review required"
        continue-on-error: true

  secret-scanning:
    name: Secret Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: moderate
          deny-licenses: GPL-2.0, GPL-3.0

  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: cpp  # Rust is analyzed as C++
          queries: security-and-quality

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Build
        run: cargo build --release

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:cpp"

  unused-deps:
    name: Unused Dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@nightly

      - name: Install cargo-udeps
        run: cargo install cargo-udeps --locked

      - name: Check for unused dependencies
        run: cargo +nightly udeps --all-targets
        continue-on-error: true
