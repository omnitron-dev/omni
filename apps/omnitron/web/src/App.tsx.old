import { defineComponent, signal, onMount } from '@omnitron-dev/aether';
import { Show } from '@omnitron-dev/aether/control-flow';
import { RouterView } from '@omnitron-dev/aether/router';
import { Shell } from './components/Shell';
import router from './router';

/**
 * Omnitron Application Component
 *
 * Root component that bootstraps the entire Omnitron frontend system
 * with the universal UI shell and all core components.
 *
 * Powered by Aether - Minimalist, high-performance frontend framework
 */
export const App = defineComponent(() => {
  const appReady = signal(false);

  onMount(() => {
    console.log(`
╔═══════════════════════════════════════════════════════════════╗
║                         OMNITRON                               ║
║              The Meta-System for Fractal Computing            ║
╠═══════════════════════════════════════════════════════════════╣
║                                                               ║
║  Frontend Status: READY                                       ║
║  Framework: Aether (Production)                               ║
║  Environment: ${import.meta.env.MODE}                         ║
║                                                               ║
╚═══════════════════════════════════════════════════════════════╝
    `);
    appReady.set(true);
  });

  return () => (
    <div class="omnitron-app" data-theme="dark">
      <Show when={appReady} fallback={<LoadingScreen />}>
        <Shell>
          <RouterView router={router} />
        </Shell>
      </Show>
    </div>
  );
});

const LoadingScreen = defineComponent(() => {
  return () => (
    <div class="loading-screen">
      <div class="loading-spinner" />
      <p>🚀 Initializing Omnitron System...</p>
    </div>
  );
});
